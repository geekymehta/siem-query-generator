const postData = {
  rule: "dGl0bGU6IFN1c3BpY2lvdXMgU1lTVEVNIFVzZXIgUHJvY2VzcyBDcmVhdGlvbgppZDogMjYxN2U3ZWQtYWRiNy00MGJhLWIwZjMtOGY5OTQ1ZmU2YzA5CnN0YXR1czogdGVzdApkZXNjcmlwdGlvbjogRGV0ZWN0cyBhIHN1c3BpY2lvdXMgcHJvY2VzcyBjcmVhdGlvbiBhcyBTWVNURU0gdXNlciAoc3VzcGljaW91cyBwcm9ncmFtIG9yIGNvbW1hbmQgbGluZSBwYXJhbWV0ZXIpCnJlZmVyZW5jZXM6CiAgICAtIEludGVybmFsIFJlc2VhcmNoCiAgICAtIGh0dHBzOi8vdG9vbHMudGhlaGFja2VyLnJlY2lwZXMvbWltaWthdHovbW9kdWxlcwphdXRob3I6IEZsb3JpYW4gUm90aCAocnVsZSksIERhdmlkIEFORFJFIChhZGRpdGlvbmFsIGtleXdvcmRzKQpkYXRlOiAyMDIxLzEyLzIwCm1vZGlmaWVkOiAyMDIyLzA0LzI3CmxvZ3NvdXJjZToKICAgIGNhdGVnb3J5OiBwcm9jZXNzX2NyZWF0aW9uCiAgICBwcm9kdWN0OiB3aW5kb3dzCmRldGVjdGlvbjoKICAgIHNlbGVjdGlvbjoKICAgICAgICBJbnRlZ3JpdHlMZXZlbDogU3lzdGVtCiAgICAgICAgVXNlcnxjb250YWluczogIyBjb3ZlcnMgbWFueSBsYW5ndWFnZSBzZXR0aW5ncwogICAgICAgICAgICAtICdBVVRIT1JJJwogICAgICAgICAgICAtICdBVVRPUkknCiAgICBzZWxlY3Rpb25fc3BlY2lhbDoKICAgICAgICAtIEltYWdlfGVuZHN3aXRoOgogICAgICAgICAgICAtICdcY2FsYy5leGUnCiAgICAgICAgICAgIC0gJ1x3c2NyaXB0LmV4ZScKICAgICAgICAgICAgLSAnXGNzY3JpcHQuZXhlJwogICAgICAgICAgICAtICdcaGguZXhlJwogICAgICAgICAgICAtICdcbXNodGEuZXhlJwogICAgICAgICAgICAtICdcZm9yZmlsZXMuZXhlJwogICAgICAgICAgICAtICdccGluZy5leGUnCiAgICAgICAgLSBDb21tYW5kTGluZXxjb250YWluczoKICAgICAgICAgICAgIyAtICdzYyBzdG9wICcgIyBzdG9wcyBhIHN5c3RlbSBzZXJ2aWNlICMgY2F1c2VzIEZQcwogICAgICAgICAgICAtICcgLU5vUCAnICAjIE9mdGVuIHVzZWQgaW4gbWFsaWNpb3VzIFBvd2VyU2hlbGwgY29tbWFuZHMKICAgICAgICAgICAgLSAnIC1XIEhpZGRlbiAnICAjIE9mdGVuIHVzZWQgaW4gbWFsaWNpb3VzIFBvd2VyU2hlbGwgY29tbWFuZHMKICAgICAgICAgICAgLSAnIC1kZWNvZGUgJyAgIyBVc2VkIHdpdGggY2VydHV0aWwKICAgICAgICAgICAgLSAnIC9kZWNvZGUgJyAgIyBVc2VkIHdpdGggY2VydHV0aWwKICAgICAgICAgICAgLSAnIC91cmxjYWNoZSAnICAjIFVzZWQgd2l0aCBjZXJ0dXRpbAogICAgICAgICAgICAtICcgLXVybGNhY2hlICcgICMgVXNlZCB3aXRoIGNlcnR1dGlsCiAgICAgICAgICAgIC0gJyAtZSogSkFCJyAgIyBQb3dlclNoZWxsIGVuY29kZWQgY29tbWFuZHMKICAgICAgICAgICAgLSAnIC1lKiBTVVZZSScgICMgUG93ZXJTaGVsbCBlbmNvZGVkIGNvbW1hbmRzCiAgICAgICAgICAgIC0gJyAtZSogU1FCRkFGZ0EnICAjIFBvd2VyU2hlbGwgZW5jb2RlZCBjb21tYW5kcwogICAgICAgICAgICAtICcgLWUqIGFXVjRJJyAgIyBQb3dlclNoZWxsIGVuY29kZWQgY29tbWFuZHMKICAgICAgICAgICAgLSAnIC1lKiBJQUInICAjIFBvd2VyU2hlbGwgbmNvZGVkIGNvbW1hbmRzCiAgICAgICAgICAgIC0gJyAtZSogUEFBJyAgIyBQb3dlclNoZWxsIGVuY29kZWQgY29tbWFuZHMKICAgICAgICAgICAgLSAnIC1lKiBhUUJsQUhnQScgICMgUG93ZXJTaGVsbCBlbmNvZGVkIGNvbW1hbmRzCiAgICAgICAgICAgIC0gJ3Zzc2FkbWluIGRlbGV0ZSBzaGFkb3dzJyAgIyBSYW5zb213YXJlCiAgICAgICAgICAgIC0gJ3JlZyBTQVZFIEhLTE0nICAjIHNhdmUgcmVnaXN0cnkgU0FNIC0gc3lza2V5IGV4dHJhY3Rpb24KICAgICAgICAgICAgLSAnIC1tYSAnICAjIFByb2NEdW1wCiAgICAgICAgICAgIC0gJ01pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFJ1bicgICMgUnVuIGtleSBpbiBjb21tYW5kIGxpbmUgLSBvZnRlbiBpbiBjb21iaW5hdGlvbiB3aXRoIFJFRyBBREQKICAgICAgICAgICAgLSAnLmRvd25sb2Fkc3RyaW5nKCcgICMgUG93ZXJTaGVsbCBkb3dubG9hZCBjb21tYW5kCiAgICAgICAgICAgIC0gJy5kb3dubG9hZGZpbGUoJyAgIyBQb3dlclNoZWxsIGRvd25sb2FkIGNvbW1hbmQKICAgICAgICAgICAgLSAnIC90aWNrZXQ6JyAgIyBSdWJldXMKICAgICAgICAgICAgLSAnZHBhcGk6OicgICAgICNNaW1pa2F0egogICAgICAgICAgICAtICdldmVudDo6Y2xlYXInICAgICAgICAjTWltaWthdHoKICAgICAgICAgICAgLSAnZXZlbnQ6OmRyb3AnICAgICAjTWltaWthdHoKICAgICAgICAgICAgLSAnaWQ6Om1vZGlmeScgICAgICAjTWltaWthdHoKICAgICAgICAgICAgLSAna2VyYmVyb3M6OicgICAgICAgI01pbWlrYXR6CiAgICAgICAgICAgIC0gJ2xzYWR1bXA6OicgICAgICAjTWltaWthdHoKICAgICAgICAgICAgLSAnbWlzYzo6JyAgICAgI01pbWlrYXR6CiAgICAgICAgICAgIC0gJ3ByaXZpbGVnZTo6JyAgICAgICAjTWltaWthdHoKICAgICAgICAgICAgLSAncnBjOjonICAgICAgI01pbWlrYXR6CiAgICAgICAgICAgIC0gJ3Nla3VybHNhOjonICAgICAgICNNaW1pa2F0egogICAgICAgICAgICAtICdzaWQ6OicgICAgICAgICNNaW1pa2F0egogICAgICAgICAgICAtICd0b2tlbjo6JyAgICAgICNNaW1pa2F0egogICAgICAgICAgICAtICd2YXVsdDo6Y3JlZCcgICAgICNNaW1pa2F0egogICAgICAgICAgICAtICd2YXVsdDo6bGlzdCcgICAgICNNaW1pa2F0egogICAgICAgICAgICAtICcgcDo6ZCAnICAjIE1pbWlrYXR6CiAgICAgICAgICAgIC0gJztpZXgoJyAgIyBQb3dlclNoZWxsIElFWAogICAgICAgICAgICAtICdNaW5pRHVtcCcgICMgUHJvY2VzcyBkdW1waW5nIG1ldGhvZCBhcGFydCBmcm9tIHByb2NkdW1wCiAgICAgICAgICAgIC0gJ25ldCB1c2VyICcKICAgIGNvbmRpdGlvbjogYWxsIG9mIHNlbGVjdGlvbioKZmFsc2Vwb3NpdGl2ZXM6CiAgICAtIEFkbWluaXN0cmF0aXZlIGFjdGl2aXR5CiAgICAtIFNjcmlwdHMgYW5kIGFkbWluaXN0cmF0aXZlIHRvb2xzIHVzZWQgaW4gdGhlIG1vbml0b3JlZCBlbnZpcm9ubWVudAogICAgLSBNb25pdG9yaW5nIGFjdGl2aXR5CmxldmVsOiBoaWdo",
  pipeline: ["qradar-aql-fields", "qradar-aql-payload"],
  target: "splunk",
  format: "default",
};

async function fetchData() {
  try {
    const response = await fetch("http://localhost:8000/sigma", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(postData),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    // Use response.text() to get the complete response text
    const data = await response.text();
    console.log("Response Text:", data);
  } catch (error) {
    // Handle errors during the fetch
    console.error("Fetch error:", error);
  }
}

// Call the async function
fetchData();
